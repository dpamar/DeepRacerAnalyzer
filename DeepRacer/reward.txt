
def distance_to_point(cheat_point, x, y):
    x1 = cheat_point[0][0]
    y1 = cheat_point[0][1]
    return (x1 - x) ** 2 + (y1 - y) ** 2

def distance_to_line(cheat_point, x, y):
    lineX1 = cheat_point[0][0]
    lineY1 = cheat_point[0][1]
    lineX2 = cheat_point[1][0]
    lineY2 = cheat_point[1][1]
    return abs((lineY2 - lineY1) * x - (lineX2 - lineX1) * y + lineX2 * lineY1 - lineY2 * lineX1) / math.sqrt(
        (lineY2 - lineY1) ** 2 + (lineX2 - lineX1) ** 2)

def reward_function(params):

    # Constants
    DISTANCE_THRESHOLD = 0.5
    SPEED_THRESHOLD = 0.7
    DIRECTION_THRESHOLD = [[10, 1], [15, 0.5]]
    STEERING_THRESHOLD = [[2, 1], [3, 0.5]]
    
    DISTANCE_WEIGHT = 1
    SPEED_WEIGHT = 2
    DIRECTION_WEIGHT = 0
    STEERING_WEIGHT = 0
    RISK_AVERSION = 1

    COMPLETION_REWARD_THRESHOLD = 180
    BEST_TIME_EVER = 120
    COMPLETION_REWARD = 1500
    
    # Disqualify: offtrack, reversed
    if params['is_offtrack'] or params['is_reversed']:
        return 1e-3

    # Get current portion of the cheat path
    x = params['x']
    y = params['y']
    best_point = cheat_data[0]
    min_dist = distance_to_point(best_point, x, y)
    for cheat_point in cheat_data:
        current_distance = distance_to_point(cheat_point, x, y)
        if current_distance < min_dist:
            min_dist = current_distance
            best_point = cheat_point
    
    distance_from_center = distance_to_line(best_point, x, y)
    if distance_from_center > DISTANCE_THRESHOLD:
        distance_reward = 1e-3
    else:
        distance_reward = 1 - (distance_from_center / DISTANCE_THRESHOLD)

    speed = params['speed']
    optimal_speed = best_point[2]
    speed_diff = abs(optimal_speed - speed)
    if speed_diff > SPEED_THRESHOLD :
        speed_reward = 1e-3
    else :
        speed_reward = 1 - (speed_diff / SPEED_THRESHOLD) ** 2

    direction = params['heading']
    optimal_direction = best_point[4]
    direction_delta = abs(direction - optimal_direction)
    if direction_delta < DIRECTION_THRESHOLD[0][0] :
        direction_reward = DIRECTION_THRESHOLD[0][1]
    elif direction_delta < DIRECTION_THRESHOLD[1][0] :
        direction_reward = DIRECTION_THRESHOLD[1][1]
    else :
        direction_reward = 1e-3
    
    steering = params['steering_angle']
    optimal_steering = best_point[3]
    steering_delta = abs(steering - optimal_steering)
    if steering_delta < STEERING_THRESHOLD[0][0] :
        steering_reward = STEERING_THRESHOLD[0][1]
    elif steering_delta < STEERING_THRESHOLD[1][0] :
        steering_reward = STEERING_THRESHOLD[1][1]
    else :
        steering_reward = 1e-3
        
    reward = RISK_AVERSION + SPEED_WEIGHT * speed_reward + DIRECTION_WEIGHT * direction_reward + STEERING_WEIGHT * steering_reward + DISTANCE_WEIGHT * distance_reward
    
    if params['progress'] >= 100:
        steps = params['steps']
        if steps <= COMPLETION_REWARD_THRESHOLD:
            reward += COMPLETION_REWARD * (COMPLETION_REWARD_THRESHOLD - steps)/(COMPLETION_REWARD_THRESHOLD - BEST_TIME_EVER)
    
    return float(reward)